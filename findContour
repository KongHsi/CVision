#include<iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <stdlib.h>
#include <stdio.h>

using namespace std;
using namespace cv;

Mat img;
Mat imgGray;Mat drawing;
int thresh = 200;

void CHfunction(int, void *);

int main(void){

    //read img, convert it to black-white imgGray
    img = imread("/home/richard/Desktop/toys/190.jpg");
    cvtColor(img,imgGray,CV_BGR2GRAY);
    threshold(imgGray,imgGray,128,255,CV_THRESH_BINARY);
    namedWindow("window",2);
    //erode then dilate to get rid of some small white pixels
    erode(imgGray,imgGray,Mat(),Point(-1,-1),2,1,1);
    dilate(imgGray,imgGray,Mat(),Point(-1,-1),30,1,1);
    //Find contours, and retrieve them
    Canny( imgGray, imgGray, 100, 100*2, 3 );

    /// Find contours
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    findContours( imgGray, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

     /// Draw contours
     drawing = Mat::zeros( imgGray.size(), CV_8UC1 );
     cout<<contours.size()<<endl;

     int max = 10000;
     int index = -1;
     RNG rng(12345);
     Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
     for( int i = 0; i< contours.size(); i++ ){
         cout<<contourArea(contours[i])<<endl;
         if(contourArea(contours[i])>max){
            max = contourArea(contours[i]);index = i;
         }
      }
     if(index == -1)
         return -1;
     drawContours( drawing, contours, index, color, 2, 8, hierarchy, 0, Point() );

     /// Show in a window
     namedWindow( "Contours",2 );
     imshow( "Contours", drawing );
     waitKey(0);
     return 0;
}


